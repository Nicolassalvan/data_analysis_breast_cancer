roc_glm <- roc(test_data$diagnosis, pred_glm)
roc_rf <- roc(test_data$diagnosis, prob_rf)
roc_svm <- roc(test_data$diagnosis, pred_svm_prob[,2])
options(warn=-1)
roc_lda <- roc(test_data$diagnosis, pred_lda$posterior[,2])
roc_qda <- roc(test_data$diagnosis, pred_qda$posterior[,2])
roc_glm <- roc(test_data$diagnosis, pred_glm)
roc_rf <- roc(test_data$diagnosis, prob_rf)
roc_svm <- roc(test_data$diagnosis, pred_svm_prob[,2])
options(warn=-1)
options(warn=-1)
roc_lda <- roc(test_data$diagnosis, pred_lda$posterior[,2])
roc_qda <- roc(test_data$diagnosis, pred_qda$posterior[,2])
roc_glm <- roc(test_data$diagnosis, pred_glm)
roc_rf <- roc(test_data$diagnosis, prob_rf)
roc_svm <- roc(test_data$diagnosis, pred_svm_prob[,2])
options(warn=0)
options(warn=1)
roc_lda <- roc(test_data$diagnosis, pred_lda$posterior[,2])
roc_qda <- roc(test_data$diagnosis, pred_qda$posterior[,2])
roc_glm <- roc(test_data$diagnosis, pred_glm)
roc_rf <- roc(test_data$diagnosis, prob_rf)
roc_svm <- roc(test_data$diagnosis, pred_svm_prob[,2])
options(warn=0)
options(warn=-1)
roc_lda <- roc(test_data$diagnosis, pred_lda$posterior[,2])
roc_qda <- roc(test_data$diagnosis, pred_qda$posterior[,2])
roc_glm <- roc(test_data$diagnosis, pred_glm)
roc_rf <- roc(test_data$diagnosis, prob_rf)
roc_svm <- roc(test_data$diagnosis, pred_svm_prob[,2])
options(warn=0)
roc_lda <- roc(test_data$diagnosis, pred_lda$posterior[,2])
roc_qda <- roc(test_data$diagnosis, pred_qda$posterior[,2])
roc_glm <- roc(test_data$diagnosis, pred_glm)
roc_rf <- roc(test_data$diagnosis, prob_rf)
roc_svm <- roc(test_data$diagnosis, pred_svm_prob[,2])
df.auc <- data.frame(model = c("LDA", "QDA", "GLM", "RF", "SVM"), auc = c(auc(roc_lda), auc(roc_qda), auc(roc_glm), auc(roc_rf), auc(roc_svm)))
auc(roc_lda)
auc(roc_qda)
auc(roc_glm)
auc(roc_rf)
auc(roc_svm)
df.auc
df.auc <- data.frame(model = c("LDA", "QDA", "GLM", "RF", "SVM"), auc = c(auc(roc_lda), auc(roc_qda), auc(roc_glm), auc(roc_rf), auc(roc_svm)))
df.auc
# cercle des corrélation AFD
plot(res.afd, choix = "var", cex = 0.8, col.var = "black", select = "contrib 8")
# install.packages("FactoMineR")
library(FactoMineR)
# install.packages("FactoMineR")
library("FactoMineR")
# AFD
res.afd <- PCA(data, quali.sup = 1, scale.unit = TRUE, graph = FALSE)
plot(res.afd, choix = "ind", habillage = 1, cex = 0.8, col.var = "black", select = "contrib 8")
# Affichage de l'axe discriminant
# cercle des corrélation AFD
plot(res.afd, choix = "var", cex = 0.8, col.var = "black", select = "contrib 8")
# AFD
res.afd <- PCA(scale(data), quali.sup = 1, scale.unit = TRUE, graph = FALSE)
?scale
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("breast-cancer.csv", header = TRUE, sep = ",")
head(data)
dim(data)
str(data)
data$diagnosis <- as.factor(data$diagnosis)
str(data)
# suppression des NaNs
data <- na.omit(data)
# suppression des colonnes inutiles : identifiant de la patiente
data <- data[,-c(1)]
head(data)
head(data)
dim(data)
data <- read.csv("breast-cancer.csv", header = TRUE, sep = ",")
head(data)
dim(data)
str(data)
data$diagnosis <- as.factor(data$diagnosis)
str(data)
# suppression des NaNs
data <- na.omit(data)
# suppression des colonnes inutiles : identifiant de la patiente
data <- data[,-c(1)]
head(data)
write.csv(data, "data_cleaned.csv", row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("breast-cancer.csv", header = TRUE, sep = ",")
data <- read.csv("data/breast-cancer.csv", header = TRUE, sep = ",")
split_data <- function (data, train_ratio) {
set.seed(1)
n <- nrow(data)
p <- ncol(data)-1
test.ratio <- 1 - train_ratio
n.test <- round(n*test.ratio)
n.test
set.seed(123)
train_index <- sample(1:nrow(data), n.test)
train_data <- data[-train_index,]
test_data <- data[train_index,]
return(list(train_data = train_data, test_data = test_data))
}
data_split <- split_data(data, 0.8)
train_data <- data_split$train_data
test_data <- data_split$test_data
split_data <- function (data, train_ratio) {
set.seed(123)
n <- nrow(data)
p <- ncol(data)-1
test.ratio <- 1 - train_ratio
n.test <- round(n*test.ratio)
train_index <- sample(1:nrow(data), n.test)
train_data <- data[-train_index,]
test_data <- data[train_index,]
return(list(train_data = train_data, test_data = test_data))
}
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("data/data_cleaned.csv", header = TRUE, sep = ",")
str(data)
data <- read.csv("data/data_cleaned.csv", header = TRUE, sep = ",")
data$diagnosis <- as.factor(data$diagnosis)
head(data)
dim(data)
str(data)
summary(data)
summary(data)
table(data$diagnosis)
barplot(table(data$diagnosis))
# Barplot avec comme étiquette le nombre de patientes par diagnostic
barplot(table(data$diagnosis), main = "Distribution des diagnostics", xlab = "Diagnostic", ylab = "Nombre de patientes", col = c("lightblue", "pink"))
# Barplot avec comme étiquette le nombre de patientes par diagnostic
barplot(table(data$diagnosis), main = "Distribution des diagnostics", xlab = "Diagnostic", ylab = "Nombre de patientes", col = c("lightblue", "pink"), legend = rownames(table(data$diagnosis)))
# Barplot avec comme étiquette le nombre de patientes par diagnostic
barplot(table(data$diagnosis), main = "Distribution des diagnostics", xlab = "Diagnostic", ylab = "Nombre de patientes", col = c("lightblue", "pink"), legend = rownames(table(data$diagnosis)), beside = TRUE)
?barplot
# Barplot avec comme étiquette le nombre de patientes par diagnostic
barplot(table(data$diagnosis), main = "Distribution des diagnostics", xlab = "Diagnostic", ylab = "Nombre de patientes", col = c("lightblue", "pink"), legend = rownames(table(data$diagnosis)), )
text(1, 200, paste("Nombre de patientes : ", nrow(data)), cex = 0.8)
library(gcookbook)
library("gcookbook")
library("ggplot2")
library("ggplot2")
geom_bar(data = data, aes(x = diagnosis, fill = diagnosis)) +
labs(title = "Distribution des diagnostics", x = "Diagnostic", y = "Nombre de patientes") +
theme_minimal() +
theme(legend.position = "none")
geom_bar(data = data, aes(x = diagnosis, fill = diagnosis))
geom_bar(data = data, aes(x = diagnosis, fill = diagnosis))
plot()
geom_bar(data = data, aes(x = diagnosis, fill = diagnosis))
plot(data$diagnosis)
ggplot(data=data, aes(x=diagnosis, y=len)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=len), vjust=-0.3, size=3.5)+
theme_minimal()
ggplot(data=data, aes(x=diagnosis)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=len), vjust=-0.3, size=3.5)+
theme_minimal()
View(data)
ggplot(data=data, aes(x=diagnosis, y=radius_mean)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=len), vjust=-0.3, size=3.5)+
theme_minimal()
# Barplot avec comme étiquette le nombre de patientes par diagnostic
barplot(table(data$diagnosis), main = "Distribution des diagnostics", xlab = "Diagnostic", ylab = "Nombre de patientes", col = c("lightblue", "pink"), legend = rownames(table(data$diagnosis)) )
# Créer le barplot et récupérer les positions des barres
counts <- table(data$diagnosis)
bp <- barplot(counts,
main = "Distribution des diagnostics",
xlab = "Diagnostic",
ylab = "Nombre de patientes",
col = c("lightblue", "pink"),
legend = rownames(counts))
# Ajouter les labels au-dessus des barres
text(x = bp, y = counts, labels = counts, pos = 3, cex = 0.8, col = "black")
# Créer le barplot et récupérer les positions des barres
counts <- table(data$diagnosis)
bp <- barplot(counts,
main = "Distribution des diagnostics",
xlab = "Diagnostic",
ylab = "Nombre de patientes",
col = c("lightblue", "pink"),
legend = rownames(counts))
# Ajouter les labels au-dessus des barres
text(x = bp, y = counts - 0.5, labels = counts, pos = 3, cex = 0.8, col = "black")
# Créer le barplot et récupérer les positions des barres
counts <- table(data$diagnosis)
bp <- barplot(counts,
main = "Distribution des diagnostics",
xlab = "Diagnostic",
ylab = "Nombre de patientes",
col = c("lightblue", "pink"),
legend = rownames(counts))
# Ajouter les labels au-dessus des barres
#text(x = bp, y = counts - 0.5, labels = counts, pos = 3, cex = 0.8, col = "black")
# Créer le barplot et récupérer les positions des barres
counts <- table(data$diagnosis)
bp <- barplot(counts,
main = "Distribution des diagnostics",
xlab = "Diagnostic",
ylab = "Nombre de patientes",
col = c("lightblue", "pink"),
legend = rownames(counts))
# Ajouter les labels au-dessus des barres
text(x = bp, y = counts - 0.5, labels = counts, pos = 3, cex = 0.8, col = "black")
# Créer le barplot et récupérer les positions des barres
counts <- table(data$diagnosis)
bp <- barplot(counts,
main = "Distribution des diagnostics",
xlab = "Diagnostic",
ylab = "Nombre de patientes",
col = c("lightblue", "pink"),
legend = rownames(counts))
# Ajouter les labels au-dessus des barres
text(x = bp, y = counts, labels = counts, pos = 3, cex = 0.8, col = "black")
# Créer le barplot et récupérer les positions des barres
counts <- table(data$diagnosis)
bp <- barplot(counts,
main = "Distribution des diagnostics",
xlab = "Diagnostic",
ylab = "Nombre de patientes",
col = c("lightblue", "pink"),
legend = counts)
# Ajouter les labels au-dessus des barres
text(x = bp, y = counts, labels = counts, pos = 3, cex = 0.8, col = "black")
# Créer le barplot et récupérer les positions des barres
counts <- table(data$diagnosis)
bp <- barplot(counts,
main = "Distribution des diagnostics",
xlab = "Diagnostic",
ylab = "Nombre de patientes",
col = c("lightblue", "pink"),
legend = rownames(counts))
# Ajouter les labels au-dessus des barres
text(x = bp, y = counts-2, labels = counts, pos = 3, cex = 0.8, col = "black")
# Créer le barplot et récupérer les positions des barres
counts <- table(data$diagnosis)
bp <- barplot(counts,
main = "Distribution des diagnostics",
xlab = "Diagnostic",
ylab = "Nombre de patientes",
col = c("lightblue", "pink"),
legend = rownames(counts))
# Ajouter les labels au-dessus des barres
text(x = bp, y = counts+10, labels = counts, pos = 3, cex = 0.8, col = "black")
# Créer le barplot et récupérer les positions des barres
counts <- table(data$diagnosis)
bp <- barplot(counts,
main = "Distribution des diagnostics",
xlab = "Diagnostic",
ylab = "Nombre de patientes",
col = c("lightblue", "pink"),
legend = rownames(counts))
# Ajouter les labels au-dessus des barres
text(x = bp, y = counts, labels = counts, pos = 3, cex = 0.8, col = "black")
# Créer le barplot et récupérer les positions des barres
counts <- table(data$diagnosis)
bp <- barplot(counts,
main = "Distribution des diagnostics",
xlab = "Diagnostic",
ylab = "Nombre de patientes",
col = c("lightblue", "pink"),
legend = rownames(counts))
# Ajouter les labels au-dessus des barres
text(x = bp, y = counts, labels = counts, pos = 2, cex = 0.8, col = "black")
# Créer le barplot et récupérer les positions des barres
counts <- table(data$diagnosis)
bp <- barplot(counts,
main = "Distribution des diagnostics",
xlab = "Diagnostic",
ylab = "Nombre de patientes",
col = c("lightblue", "pink"),
legend = rownames(counts))
# Ajouter les labels au-dessus des barres
text(x = bp, y = counts, labels = counts, pos = 1, cex = 0.8, col = "black")
counts <- table(data$diagnosis)
bp <- barplot(counts,
main = "Distribution des diagnostics",
xlab = "Diagnostic",
ylab = "Nombre de patientes",
col = c("lightblue", "pink"),
legend = rownames(counts))
# Ajouter les labels au-dessus des barres
text(x = bp, y = counts, labels = counts, pos = 1, cex = 0.8, col = "black")
prop.table(table(data$diagnosis))
proportions <- prop.table(table(data$diagnosis))
bp <- barplot(counts,
main = "Distribution des diagnostics",
xlab = "Diagnostic",
ylab = "Nombre de patientes",
col = c("lightblue", "pink"),
legend = rownames(counts))
# Ajouter les labels au-dessus des barres
text(x = bp, y = counts, labels = counts, pos = 1, cex = 0.8, col = "black")
proportions <- prop.table(table(data$diagnosis))
bp <- barplot(counts,
main = "Distribution des diagnostics",
xlab = "Diagnostic",
ylab = "Nombre de patientes",
col = c("lightblue", "pink"),
legend = rownames(proportions))
# Ajouter les labels au-dessus des barres
text(x = bp, y = proportions, labels = proportions, pos = 1, cex = 0.8, col = "black")
proportions <- prop.table(table(data$diagnosis))
proportions
par(mfrow = c(3,3))
for(i in 2:31){
hist(data[,i], main = colnames(data)[i], xlab = colnames(data)[i], col = "blue")
}
correlation <- cor(data[2:31])
# install.packages("corrplot")
library("corrplot")
# install.packages("corrplot")
library("corrplot")
correlation <- cor(data[2:31])
corrplot(correlation, method = "ellipse", type = "upper", order = "hclust", tl.col = "black", tl.srt = 90, tl.cex = 0.7)
# Fonction carrément volée sur internet https://rpubs.com/sediaz/Correlations
corr_check <- function(Dataset, threshold){
matriz_cor <- cor(Dataset)
matriz_cor
for (i in 1:nrow(matriz_cor)){
correlations <-  which((abs(matriz_cor[i,i:ncol(matriz_cor)]) > threshold) & (matriz_cor[i,i:ncol(matriz_cor)] != 1))
if(length(correlations)> 0){
lapply(correlations,FUN =  function(x) (cat(paste(colnames(Dataset)[i], "with",colnames(Dataset)[x]), "\n")))
}
}
}
corr_check(data[2:31], 0.98)
# Fonction carrément volée sur internet https://rpubs.com/sediaz/Correlations
corr_check <- function(Dataset, threshold){
matriz_cor <- cor(Dataset)
matriz_cor
for (i in 1:nrow(matriz_cor)){
correlations <-  which((abs(matriz_cor[i,i:ncol(matriz_cor)]) > threshold) & (matriz_cor[i,i:ncol(matriz_cor)] != 1))
if(length(correlations)> 0){
lapply(correlations,FUN =  function(x) (cat(paste(colnames(Dataset)[i], "with",colnames(Dataset)[x]), "\n")))
}
}
}
corr_check(data[2:31], 0.98)
#data <- data[,-c(4, 14, 24)]
# head(data)
#correlation <- cor(data[2:28])
# check_corr <- corr_check(data[2:28], 0.98)
# data <- data[,-c(4)]
# head(data)
# data <- data[,-c(4)]
# head(data)
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("data/data_cleaned.csv", header = TRUE, sep = ",")
data$diagnosis <- as.factor(data$diagnosis)
train_data <- read.csv("data/train_data.csv", header = TRUE, sep = ",")
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("data/breast-cancer.csv", header = TRUE, sep = ",")
head(data)
dim(data)
str(data)
data$diagnosis <- as.factor(data$diagnosis)
str(data)
# suppression des NaNs
data <- na.omit(data)
# suppression des colonnes inutiles : identifiant de la patiente
data <- data[,-c(1)]
head(data)
write.csv(data, "data/data_cleaned.csv", row.names = FALSE)
split_data <- function (data, train_ratio) {
set.seed(123)
n <- nrow(data)
p <- ncol(data)-1
test.ratio <- 1 - train_ratio
n.test <- round(n*test.ratio)
train_index <- sample(1:nrow(data), n.test)
train_data <- data[-train_index,]
test_data <- data[train_index,]
return(list(train_data = train_data, test_data = test_data))
}
data_split <- split_data(data, 0.8) # 1/5 des données pour le test
train_data <- data_split$train_data
test_data <- data_split$test_data
write.csv(train_data, "data/train_data.csv", row.names = FALSE)
write.csv(test_data, "data/test_data.csv", row.names = FALSE)
data <- read.csv("data/data_cleaned.csv", header = TRUE, sep = ",")
data$diagnosis <- as.factor(data$diagnosis)
train_data <- read.csv("data/train_data.csv", header = TRUE, sep = ",")
train_data$diagnosis <- as.factor(train_data$diagnosis)
test_data <- read.csv("data/test_data.csv", header = TRUE, sep = ",")
test_data$diagnosis <- as.factor(test_data$diagnosis)
head(data)
# dim(data)
# str(data)
# install.packages("FactoMineR")
library("FactoMineR")
# install.packages("MASS")
library(MASS)
afd_lda_model <- lda(diagnosis ~ ., data = train_data)
pred_afd <- predict(afd_lda_model, test_data, prior=c(0.5, 0.5))
table(pred_afd$class, test_data$diagnosis)
```{r}
mean(pred_afd$class == test_data$diagnosis)
pred_afd <- predict(afd_lda_model, test_data, prior=c(0.5, 0.5))
table(pred_afd$class, test_data$diagnosis)
mean(pred_afd$class == test_data$diagnosis) # accuracy
plot(afd_lda_model)
plot(afd_lda_model, type = "both")
plot(afd_lda_model, type = "both", dimen = 3)
library("klaR")
step(lda(diagnosis ~ ., data = train_data), direction = "both")
step(lda(diagnosis ~ ., data = train_data), direction = "both")
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("data/data_cleaned.csv", header = TRUE, sep = ",")
data$diagnosis <- as.factor(data$diagnosis)
train_data <- read.csv("data/train_data.csv", header = TRUE, sep = ",")
train_data$diagnosis <- as.factor(train_data$diagnosis)
test_data <- read.csv("data/test_data.csv", header = TRUE, sep = ",")
test_data$diagnosis <- as.factor(test_data$diagnosis)
head(data)
# dim(data)
# str(data)
library(MASS)
res.afd <- lda(train_data$diagnosis ~ ., data = train_data)
res.afd <- lda(train_data$diagnosis ~ ., data = train_data)
res.afd
plot(res.afd)
res.afd$scaling
res.afd <- lda(data$diagnosis ~ ., data = data)
res.afd
plot(res.afd)
F12 = predict(res.afd, prior=rep(1/2,2))$diagnosis
#F12
cercle_correlation=cor(data,F12)
F12 = predict(res.afd, prior=rep(1/2,2))$diagnosis
F12
cercle_correlation=cor(data,F12)
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("data/data_cleaned.csv", header = TRUE, sep = ",")
data$diagnosis <- as.factor(data$diagnosis)
train_data <- read.csv("data/train_data.csv", header = TRUE, sep = ",")
train_data$diagnosis <- as.factor(train_data$diagnosis)
test_data <- read.csv("data/test_data.csv", header = TRUE, sep = ",")
test_data$diagnosis <- as.factor(test_data$diagnosis)
head(data)
# dim(data)
# str(data)
library(MASS)
res.afd <- lda(data$diagnosis ~ ., data = data)
res.afd
plot(res.afd)
F12 = predict(res.afd, prior=rep(1/2,2))$diagnosis
F12
cercle_correlation=cor(data,F12)
F12 = predict(res.afd, prior=rep(1/2,2))$diagnosis
F12
cercle_correlation=cor(data[2:31],F12)
cercle_correlation
5
F12 = predict(res.afd, prior=rep(1/2,2))$diagnosis
F12
cercle_correlation=cor(data[,2:31],F12)
cercle_correlation
5
F12 = predict(res.afd, prior=rep(1/2,2))
F12
cercle_correlation=cor(data[,2:31],F12)
F12 = predict(res.afd, prior=rep(1/2,2))$x
F12
cercle_correlation=cor(data[,2:31],F12)
cercle_correlation
5
F12 = predict(res.afd, prior=rep(1/2,2))$x
# F12
cercle_correlation=cor(data[,2:31],F12)
cercle_correlation
5
library(FactoMineR)
plot(res.afd, choix="var")
plot(res.afd, choix="ind")
plot(res.afd, choix="ind")
library("FactoMineR")
res.afd <- lda(diagnosis ~ ., data = data)
res.afd
plot(res.afd)
names(res.afd)
coef_afd <- lda_model$scaling
coef_afd <- res.afd$scaling
cor_vars_axes <- cor(X, X %*% coef_lda)
cor_vars_axes <- cor(data[-1], data[-1] %*% coef_lda)
cor_vars_axes <- cor(data[-1], data[-1] %*% coef_afd)
cor_vars_axes <- cor(data[-1,], data[-1,] %*% coef_afd)
data[-1,]
data[-1:]
# variables quantitatives
data_num <- data[, -1]
# variables qualitatives
data_qual <- data[, 1]
data_num
cor_vars_axes <- cor(data_num, data_num %*% coef_afd)
data_num <- as.matrix(data_num)
cor_vars_axes <- cor(data_num, data_num %*% coef_afd)
library(factoextra)
install.package("factoextra")
library("FactoMineR")
fviz_fda_var(afdm, col.circle = "steelblue")
plotcc(cor_vars_axes, col.circle = "steelblue")
# cercle de corrélations
plot.cor(data_num, cor_vars_axes, axes = c(1, 2), col.var = "black", col.axis = "black", main = "Cercle de corrélations")
DFA(data, data$diagnosis, scale = TRUE)
library("FactoMineR")
DFA(data, data$diagnosis, scale = TRUE)
# Installer et charger les bibliothèques nécessaires
install.packages("FactoMineR")
install.packages("factoextra")
